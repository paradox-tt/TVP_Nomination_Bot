// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { lazyDeriveSection } from "./util/lazy.js";
import * as accounts from "./accounts/index.js";
import * as balances from "./balances/index.js";
import * as bounties from "./bounties/index.js";
import * as chain from "./chain/index.js";
import * as contracts from "./contracts/index.js";
import * as council from "./council/index.js";
import * as crowdloan from "./crowdloan/index.js";
import * as democracy from "./democracy/index.js";
import * as elections from "./elections/index.js";
import * as imOnline from "./imOnline/index.js";
import * as membership from "./membership/index.js";
import * as parachains from "./parachains/index.js";
import * as session from "./session/index.js";
import * as society from "./society/index.js";
import * as staking from "./staking/index.js";
import * as technicalCommittee from "./technicalCommittee/index.js";
import * as treasury from "./treasury/index.js";
import * as tx from "./tx/index.js";
export { packageInfo } from "./packageInfo.js";
export * from "./type/index.js";
export { lazyDeriveSection };
export const derive = {
  accounts,
  balances,
  bounties,
  chain,
  contracts,
  council,
  crowdloan,
  democracy,
  elections,
  imOnline,
  membership,
  parachains,
  session,
  society,
  staking,
  technicalCommittee,
  treasury,
  tx
};
// Enable derive only if some of these modules are available
const checks = {
  contracts: {
    instances: ['contracts'],
    methods: []
  },
  council: {
    instances: ['council'],
    methods: [],
    withDetect: true
  },
  crowdloan: {
    instances: ['crowdloan'],
    methods: []
  },
  democracy: {
    instances: ['democracy'],
    methods: []
  },
  elections: {
    instances: ['phragmenElection', 'electionsPhragmen', 'elections', 'council'],
    methods: [],
    withDetect: true
  },
  imOnline: {
    instances: ['imOnline'],
    methods: []
  },
  membership: {
    instances: ['membership'],
    methods: []
  },
  parachains: {
    instances: ['parachains', 'registrar'],
    methods: []
  },
  session: {
    instances: ['session'],
    methods: []
  },
  society: {
    instances: ['society'],
    methods: []
  },
  staking: {
    instances: ['staking'],
    methods: ['erasRewardPoints']
  },
  technicalCommittee: {
    instances: ['technicalCommittee'],
    methods: [],
    withDetect: true
  },
  treasury: {
    instances: ['treasury'],
    methods: []
  }
};

function getModuleInstances(api, specName, moduleName) {
  return api.registry.getModuleInstances(specName, moduleName) || [];
}
/**
 * Returns an object that will inject `api` into all the functions inside
 * `allSections`, and keep the object architecture of `allSections`.
 */

/** @internal */


function injectFunctions(instanceId, api, derives) {
  const queryKeys = Object.keys(api.query);
  const specName = api.runtimeVersion.specName.toString();

  const filterQueryKeys = q => queryKeys.includes(q);

  const filterInstances = q => getModuleInstances(api, specName, q).some(filterQueryKeys);

  const filterMethods = instances => m => instances.some(q => queryKeys.includes(q) && !!api.query[q][m]);

  const isIncluded = s => !checks[s] || checks[s].instances.some(filterQueryKeys) && (!checks[s].methods.length || checks[s].methods.every(filterMethods(checks[s].instances))) || checks[s].withDetect && checks[s].instances.some(filterInstances);

  const getKeys = section => Object.keys(derives[section]);

  const creator = (section, method) => derives[section][method](instanceId, api);

  const result = {};
  const names = Object.keys(derives);

  for (let i = 0; i < names.length; i++) {
    const name = names[i];

    if (isIncluded(name)) {
      lazyDeriveSection(result, name, getKeys, creator);
    }
  }

  return result;
} // FIXME The return type of this function should be {...ExactDerive, ...DeriveCustom}
// For now we just drop the custom derive typings

/** @internal */


export function getAvailableDerives(instanceId, api, custom = {}) {
  return { ...injectFunctions(instanceId, api, derive),
    ...injectFunctions(instanceId, api, custom)
  };
}